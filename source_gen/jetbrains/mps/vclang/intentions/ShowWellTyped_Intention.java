package jetbrains.mps.vclang.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.vclang.behavior.AdapterUtils;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import com.jetbrains.jetpad.vclang.term.expr.Expression;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.vclang.behavior.HasArguments_BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.jetbrains.jetpad.vclang.term.definition.Binding;
import com.jetbrains.jetpad.vclang.term.expr.visitor.NormalizeVisitor;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class ShowWellTyped_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public ShowWellTyped_Intention() {
    super(MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x16d1097f9c1c95c8L, "jetbrains.mps.vclang.structure.BaseVcConcept"), IntentionType.NORMAL, false, new SNodePointer("r:318df55d-23ea-4c41-a579-83aead8cbe66(jetbrains.mps.vclang.intentions)", "840330608637093725"));
  }
  @Override
  public String getPresentation() {
    return "ShowWellTyped";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return AdapterUtils.getWellTyped(node) != null;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new ShowWellTyped_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Print internal info";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      Object o = AdapterUtils.getWellTyped(node);
      if (o instanceof Expression) {
        Expression e = (Expression) o;
        StringBuilder b = new StringBuilder();
        e.prettyPrint(b, ListSequence.fromList(new ArrayList<String>()), Expression.PREC);

        List<String> bindings = ListSequence.fromList(new ArrayList<String>());
        SNode n = SNodeOperations.getNodeAncestor(node, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xc23f5510097501bL, "jetbrains.mps.vclang.structure.HasArguments"), true, false);
        while (SNodeOperations.isInstanceOf(n, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xc23f5510097501bL, "jetbrains.mps.vclang.structure.HasArguments"))) {
          ListSequence.fromList(bindings).addSequence(ListSequence.fromList(HasArguments_BehaviorDescriptor.getArguments_id1$0zzZHWG3G.invoke(SNodeOperations.cast(n, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xc23f5510097501bL, "jetbrains.mps.vclang.structure.HasArguments")), false)).reversedList().select(new ISelector<SNode, String>() {
            public String select(SNode it) {
              return SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            }
          }));
          n = SNodeOperations.getNodeAncestor(n, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xc23f5510097501bL, "jetbrains.mps.vclang.structure.HasArguments"), false, false);
        }
        for (String name : bindings) {
          System.out.print(name + " ");
        }
        System.out.println();

        TypeCheckUtils.tcLog.info("Expr=" + b.toString());
        Expression t;
        if ((t = e.getType(ListSequence.fromList(new ArrayList<Binding>()))) != null) {
          TypeCheckUtils.tcLog.info("Type=" + t.normalize(NormalizeVisitor.Mode.NF));
        } else {
          TypeCheckUtils.tcLog.error("Cannot infer type of expression");
        }
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return ShowWellTyped_Intention.this;
    }
  }
}
