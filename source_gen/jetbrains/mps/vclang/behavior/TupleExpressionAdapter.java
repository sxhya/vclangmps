package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import com.jetbrains.jetpad.vclang.term.Abstract;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import com.jetbrains.jetpad.vclang.term.expr.visitor.AbstractExpressionVisitor;

public class TupleExpressionAdapter extends ExpressionAdapter implements Abstract.TupleExpression {
  private SNode thisNode;
  public TupleExpressionAdapter(SNode te) {
    thisNode = te;
  }
  public List<? extends Abstract.Expression> getFields() {
    return ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a654L, 0x75cfba109e317433L, "fields"))).select(new ISelector<SNode, Abstract.Expression>() {
      public Abstract.Expression select(SNode it) {
        return BehaviorReflection.invokeVirtual(Abstract.Expression.class, it, "virtual_toSourceExpression_7330199235213689458", new Object[]{});
      }
    }).toListSequence();
  }
  public <P, R> R accept(AbstractExpressionVisitor<? super P, ? extends R> visitor, P params) {
    return visitor.visitTuple(this, params);
  }
}
