package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class DefType_Behavior {
  public static void init(SNode thisNode) {
  }
  public static void virtual_addFunctionalSymbolToScope_2351979189869651664(SNode thisNode, List<SNode> result, FunctorScopeRequestDescriptor desc) {
    if (!(desc.getIsInfix()) || ListSequence.fromList(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_getExplicitArguments_7364609393484886616", new Object[]{})).count() >= 2) {
      ListSequence.fromList(result).addElement(thisNode);
    }
    for (SNode cons : ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x75cfba109e2e5fe5L, 0x75cfba109e2fd6f6L, "constructors")))) {
      BehaviorReflection.invokeVirtual(Void.class, cons, "virtual_addFunctionalSymbolToScope_2351979189869651664", new Object[]{result, desc});
    }
  }
}
