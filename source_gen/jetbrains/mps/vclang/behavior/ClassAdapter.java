package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import com.jetbrains.jetpad.vclang.term.Abstract;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Collection;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.jetbrains.jetpad.vclang.term.definition.visitor.AbstractDefinitionVisitor;

public class ClassAdapter extends DefinitionAdapter implements Abstract.ClassDefinition {
  private SNode thisNode;
  public ClassAdapter(SNode t) {
    thisNode = t;
    AdapterUtils.rememberAdapter(thisNode, this);
  }

  protected SNode getThisNode() {
    return thisNode;
  }
  public Collection<? extends Abstract.Definition> getFields() {
    // should return the list of static fields 
    List<Abstract.Definition> a = ListSequence.fromList(new LinkedList<Abstract.Definition>());
    for (SNode s : ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec305aL, 0xfc408c778ec7ec9L, "statements")))) {
      SNode d = IClassMember_BehaviorDescriptor.getDefinition_id24ni4bpKruo.invoke(s);
      if ((d != null)) {
        ListSequence.fromList(a).addElement(Definition_BehaviorDescriptor.toSourceDefinition_id5NQyKEZGoPp.invoke(d));
      }
    }
    return a;
  }

  public Collection<? extends Abstract.Statement> getStatements() {
    return ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec305aL, 0xfc408c778ec7ec9L, "statements"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.getConcept(it).isAbstract());
      }
    }).select(new ISelector<SNode, Abstract.Statement>() {
      public Abstract.Statement select(SNode it) {
        return IClassMember_BehaviorDescriptor.toSourceStatement_id3wdrnIK4lOW.invoke(it);
      }
    }).toListSequence();
  }

  public <P, R> R accept(AbstractDefinitionVisitor<? super P, ? extends R> visitor, P params) {
    return visitor.visitClass(this, params);
  }
}
