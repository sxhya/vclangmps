package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import com.jetbrains.jetpad.vclang.term.Abstract;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.jetbrains.jetpad.vclang.term.expr.arg.Utils;
import com.jetbrains.jetpad.vclang.term.statement.visitor.AbstractStatementVisitor;

public class NamespaceCommandAdapter_ implements Abstract.NamespaceCommandStatement {
  private SNode thisNode;

  public NamespaceCommandAdapter_(SNode t) {
    thisNode = t;
  }

  public Abstract.NamespaceCommandStatement.Kind getKind() {
    {
      SAbstractConcept cncpt = SNodeOperations.getConcept(thisNode);
      boolean matchedCase = false;
      if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe7cL, "jetbrains.mps.vclang.structure.OpenScopeCommand"))) {
        matchedCase = true;
        return Abstract.NamespaceCommandStatement.Kind.OPEN;
      }
      if (SConceptOperations.isExactly(SNodeOperations.asSConcept(cncpt), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe81L, "jetbrains.mps.vclang.structure.ExportScopeCommand"))) {
        matchedCase = true;
        return Abstract.NamespaceCommandStatement.Kind.EXPORT;
      }
      if (!(matchedCase)) {
      }
    }
    return Abstract.NamespaceCommandStatement.Kind.CLOSE;
  }
  public List<? extends Abstract.Identifier> getPath() {
    return ListSequence.fromList(AdapterUtils.getPath(SLinkOperations.getTarget(thisNode, MetaAdapterFactory.getReferenceLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe7fL, 0x37ebde1aa3d50122L, "classifier")))).select(new ISelector<String, Abstract.Identifier>() {
      public Abstract.Identifier select(String it) {
        final String it2 = it;
        return new Abstract.Identifier() {
          public Utils.Name getName() {
            return new Utils.Name(it2);
          }
        };
      }
    }).toListSequence();
  }

  public List<? extends Abstract.Identifier> getNames() {
    // TODO: Implement this 
    return null;
  }

  public <P, R> R accept(AbstractStatementVisitor<? super P, ? extends R> visitor, P p) {
    return visitor.visitNamespaceCommand(this, p);
  }
}
