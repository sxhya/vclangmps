package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myHasArguments_BehaviorDescriptor = new HasArguments_BehaviorDescriptor();
  private final BHDescriptor myExpression_BehaviorDescriptor = new Expression_BehaviorDescriptor();
  private final BHDescriptor myIValidIdentifier_BehaviorDescriptor = new IValidIdentifier_BehaviorDescriptor();
  private final BHDescriptor myIValidFunctionalSymbol_BehaviorDescriptor = new IValidFunctionalSymbol_BehaviorDescriptor();
  private final BHDescriptor myClassDefinition_BehaviorDescriptor = new ClassDefinition_BehaviorDescriptor();
  private final BHDescriptor myDefinition_BehaviorDescriptor = new Definition_BehaviorDescriptor();
  private final BHDescriptor myConstructorWithPatterns_BehaviorDescriptor = new ConstructorWithPatterns_BehaviorDescriptor();
  private final BHDescriptor myNewExpression_BehaviorDescriptor = new NewExpression_BehaviorDescriptor();
  private final BHDescriptor myPatternAny_BehaviorDescriptor = new PatternAny_BehaviorDescriptor();
  private final BHDescriptor myPatternId_BehaviorDescriptor = new PatternId_BehaviorDescriptor();
  private final BHDescriptor myPatternConstructor_BehaviorDescriptor = new PatternConstructor_BehaviorDescriptor();
  private final BHDescriptor myAbstractPattern_BehaviorDescriptor = new AbstractPattern_BehaviorDescriptor();
  private final BHDescriptor myBaseVcConcept_BehaviorDescriptor = new BaseVcConcept_BehaviorDescriptor();
  private final BHDescriptor myIVcConcept_BehaviorDescriptor = new IVcConcept_BehaviorDescriptor();
  private final BHDescriptor myAbstractScopeCommand_BehaviorDescriptor = new AbstractScopeCommand_BehaviorDescriptor();
  private final BHDescriptor myIClassMember_BehaviorDescriptor = new IClassMember_BehaviorDescriptor();
  private final BHDescriptor myVcLangNamespace_BehaviorDescriptor = new VcLangNamespace_BehaviorDescriptor();
  private final BHDescriptor myDefExpression_BehaviorDescriptor = new DefExpression_BehaviorDescriptor();
  private final BHDescriptor myLetExpression_BehaviorDescriptor = new LetExpression_BehaviorDescriptor();
  private final BHDescriptor myLetClause_BehaviorDescriptor = new LetClause_BehaviorDescriptor();
  private final BHDescriptor myOverrideModifier_BehaviorDescriptor = new OverrideModifier_BehaviorDescriptor();
  private final BHDescriptor myRefExpression_BehaviorDescriptor = new RefExpression_BehaviorDescriptor();
  private final BHDescriptor myTypedArgument_BehaviorDescriptor = new TypedArgument_BehaviorDescriptor();
  private final BHDescriptor myDotExpression_BehaviorDescriptor = new DotExpression_BehaviorDescriptor();
  private final BHDescriptor myAbstractDotOperation_BehaviorDescriptor = new AbstractDotOperation_BehaviorDescriptor();
  private final BHDescriptor myStaticFieldAccessOperation_BehaviorDescriptor = new StaticFieldAccessOperation_BehaviorDescriptor();
  private final BHDescriptor myPatternParenthesis_BehaviorDescriptor = new PatternParenthesis_BehaviorDescriptor();
  private final BHDescriptor myParenthesizedExpression_BehaviorDescriptor = new ParenthesizedExpression_BehaviorDescriptor();
  private final BHDescriptor myElimExpression_BehaviorDescriptor = new ElimExpression_BehaviorDescriptor();
  private final BHDescriptor myAbstractExpression_BehaviorDescriptor = new AbstractExpression_BehaviorDescriptor();
  private final BHDescriptor myAbstractBinOpExpression_BehaviorDescriptor = new AbstractBinOpExpression_BehaviorDescriptor();
  private final BHDescriptor myPiExpression_BehaviorDescriptor = new PiExpression_BehaviorDescriptor();
  private final BHDescriptor mySigmaExpression_BehaviorDescriptor = new SigmaExpression_BehaviorDescriptor();
  private final BHDescriptor myLambdaExpression_BehaviorDescriptor = new LambdaExpression_BehaviorDescriptor();
  private final BHDescriptor myApplicationExpression_BehaviorDescriptor = new ApplicationExpression_BehaviorDescriptor();
  private final BHDescriptor myVariableExpression_BehaviorDescriptor = new VariableExpression_BehaviorDescriptor();
  private final BHDescriptor myTupleExpression_BehaviorDescriptor = new TupleExpression_BehaviorDescriptor();
  private final BHDescriptor myTelescopeArgument_BehaviorDescriptor = new TelescopeArgument_BehaviorDescriptor();
  private final BHDescriptor myVariable_BehaviorDescriptor = new Variable_BehaviorDescriptor();
  private final BHDescriptor myAbstractArgument_BehaviorDescriptor = new AbstractArgument_BehaviorDescriptor();
  private final BHDescriptor myITypedArgument_BehaviorDescriptor = new ITypedArgument_BehaviorDescriptor();
  private final BHDescriptor myAbstractClause_BehaviorDescriptor = new AbstractClause_BehaviorDescriptor();
  private final BHDescriptor myClause_BehaviorDescriptor = new Clause_BehaviorDescriptor();
  private final BHDescriptor myArrowExpression_BehaviorDescriptor = new ArrowExpression_BehaviorDescriptor();
  private final BHDescriptor myLeveledUniverse_BehaviorDescriptor = new LeveledUniverse_BehaviorDescriptor();
  private final BHDescriptor myTypeUniverse_BehaviorDescriptor = new TypeUniverse_BehaviorDescriptor();
  private final BHDescriptor myTruncatedTypeUniverse_BehaviorDescriptor = new TruncatedTypeUniverse_BehaviorDescriptor();
  private final BHDescriptor myPropUniverse_BehaviorDescriptor = new PropUniverse_BehaviorDescriptor();
  private final BHDescriptor mySetUniverse_BehaviorDescriptor = new SetUniverse_BehaviorDescriptor();
  private final BHDescriptor myDefFunction_BehaviorDescriptor = new DefFunction_BehaviorDescriptor();
  private final BHDescriptor myPrecedence_BehaviorDescriptor = new Precedence_BehaviorDescriptor();
  private final BHDescriptor myDefType_BehaviorDescriptor = new DefType_BehaviorDescriptor();
  private final BHDescriptor myAbstractConstructor_BehaviorDescriptor = new AbstractConstructor_BehaviorDescriptor();
  private final BHDescriptor myConstructor_BehaviorDescriptor = new Constructor_BehaviorDescriptor();
  private final BHDescriptor myBinOpExpression_BehaviorDescriptor = new BinOpExpression_BehaviorDescriptor();
  private final BHDescriptor myNumeral__BehaviorDescriptor = new Numeral__BehaviorDescriptor();
  private final BHDescriptor myBracketExpression_BehaviorDescriptor = new BracketExpression_BehaviorDescriptor();
  private final BHDescriptor myStaticModifier_BehaviorDescriptor = new StaticModifier_BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[58];
    myConceptBehaviorIds[0] = 0xc23f5510097501bL;
    myConceptBehaviorIds[1] = 0xc23f55100976f5cL;
    myConceptBehaviorIds[2] = 0xc23f551009b1df8L;
    myConceptBehaviorIds[3] = 0xc23f551009b1e0dL;
    myConceptBehaviorIds[4] = 0xfc408c778ec305aL;
    myConceptBehaviorIds[5] = 0xfc408c778ec7ec8L;
    myConceptBehaviorIds[6] = 0x1119e4631f266669L;
    myConceptBehaviorIds[7] = 0x134a75c14102d4e1L;
    myConceptBehaviorIds[8] = 0x134a75c1410d5ad0L;
    myConceptBehaviorIds[9] = 0x134a75c1410d5ad1L;
    myConceptBehaviorIds[10] = 0x134a75c1410d5ad4L;
    myConceptBehaviorIds[11] = 0x13b91a232b9e7fd0L;
    myConceptBehaviorIds[12] = 0x16d1097f9c1c95c8L;
    myConceptBehaviorIds[13] = 0x16d1097f9c1d0c09L;
    myConceptBehaviorIds[14] = 0x37ebde1aa3d4fe7fL;
    myConceptBehaviorIds[15] = 0x37ebde1aa3d5f034L;
    myConceptBehaviorIds[16] = 0x380d6d7bb00e7ce0L;
    myConceptBehaviorIds[17] = 0x40feb6e2a72ce3afL;
    myConceptBehaviorIds[18] = 0x4e9ce656c7c3f7ccL;
    myConceptBehaviorIds[19] = 0x4e9ce656c7c3f7ceL;
    myConceptBehaviorIds[20] = 0x5b62464c93378462L;
    myConceptBehaviorIds[21] = 0x5c7035a38c5ef32eL;
    myConceptBehaviorIds[22] = 0x5cf68b0abfa42c58L;
    myConceptBehaviorIds[23] = 0x6168f46017301b6eL;
    myConceptBehaviorIds[24] = 0x6168f46017301b77L;
    myConceptBehaviorIds[25] = 0x6168f46017309911L;
    myConceptBehaviorIds[26] = 0x61f824a8086f83a9L;
    myConceptBehaviorIds[27] = 0x61f824a8086fa9f4L;
    myConceptBehaviorIds[28] = 0x62a6e9940366eec3L;
    myConceptBehaviorIds[29] = 0x62a6e9940366eef7L;
    myConceptBehaviorIds[30] = 0x62a6e9940367a261L;
    myConceptBehaviorIds[31] = 0x62a6e9940367a264L;
    myConceptBehaviorIds[32] = 0x62a6e9940367a26dL;
    myConceptBehaviorIds[33] = 0x62a6e9940367a284L;
    myConceptBehaviorIds[34] = 0x62a6e9940367a64eL;
    myConceptBehaviorIds[35] = 0x62a6e9940367a651L;
    myConceptBehaviorIds[36] = 0x62a6e9940367a654L;
    myConceptBehaviorIds[37] = 0x62a6e9940367a6c1L;
    myConceptBehaviorIds[38] = 0x62a6e9940367a6e4L;
    myConceptBehaviorIds[39] = 0x634b3353f5ace1e6L;
    myConceptBehaviorIds[40] = 0x634b3353f5ace245L;
    myConceptBehaviorIds[41] = 0x634b3353f5aea13cL;
    myConceptBehaviorIds[42] = 0x634b3353f5af0aceL;
    myConceptBehaviorIds[43] = 0x634b3353f5af0f5fL;
    myConceptBehaviorIds[44] = 0x634b3353f5af0fa6L;
    myConceptBehaviorIds[45] = 0x634b3353f5af0fa9L;
    myConceptBehaviorIds[46] = 0x634b3353f5af0ff1L;
    myConceptBehaviorIds[47] = 0x634b3353f5af1159L;
    myConceptBehaviorIds[48] = 0x634b3353f5af115aL;
    myConceptBehaviorIds[49] = 0x634b3353f5af13eaL;
    myConceptBehaviorIds[50] = 0x634b3353f5af14cfL;
    myConceptBehaviorIds[51] = 0x75cfba109e2e5fe5L;
    myConceptBehaviorIds[52] = 0x75cfba109e2ee299L;
    myConceptBehaviorIds[53] = 0x75cfba109e2ee29aL;
    myConceptBehaviorIds[54] = 0x75cfba109e316d2cL;
    myConceptBehaviorIds[55] = 0x75cfba109e316ee9L;
    myConceptBehaviorIds[56] = 0x75cfba109e31841fL;
    myConceptBehaviorIds[57] = 0x7b3886e81fa1cdbeL;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return myHasArguments_BehaviorDescriptor;
      case 1:
        return myExpression_BehaviorDescriptor;
      case 2:
        return myIValidIdentifier_BehaviorDescriptor;
      case 3:
        return myIValidFunctionalSymbol_BehaviorDescriptor;
      case 4:
        return myClassDefinition_BehaviorDescriptor;
      case 5:
        return myDefinition_BehaviorDescriptor;
      case 6:
        return myConstructorWithPatterns_BehaviorDescriptor;
      case 7:
        return myNewExpression_BehaviorDescriptor;
      case 8:
        return myPatternAny_BehaviorDescriptor;
      case 9:
        return myPatternId_BehaviorDescriptor;
      case 10:
        return myPatternConstructor_BehaviorDescriptor;
      case 11:
        return myAbstractPattern_BehaviorDescriptor;
      case 12:
        return myBaseVcConcept_BehaviorDescriptor;
      case 13:
        return myIVcConcept_BehaviorDescriptor;
      case 14:
        return myAbstractScopeCommand_BehaviorDescriptor;
      case 15:
        return myIClassMember_BehaviorDescriptor;
      case 16:
        return myVcLangNamespace_BehaviorDescriptor;
      case 17:
        return myDefExpression_BehaviorDescriptor;
      case 18:
        return myLetExpression_BehaviorDescriptor;
      case 19:
        return myLetClause_BehaviorDescriptor;
      case 20:
        return myOverrideModifier_BehaviorDescriptor;
      case 21:
        return myRefExpression_BehaviorDescriptor;
      case 22:
        return myTypedArgument_BehaviorDescriptor;
      case 23:
        return myDotExpression_BehaviorDescriptor;
      case 24:
        return myAbstractDotOperation_BehaviorDescriptor;
      case 25:
        return myStaticFieldAccessOperation_BehaviorDescriptor;
      case 26:
        return myPatternParenthesis_BehaviorDescriptor;
      case 27:
        return myParenthesizedExpression_BehaviorDescriptor;
      case 28:
        return myElimExpression_BehaviorDescriptor;
      case 29:
        return myAbstractExpression_BehaviorDescriptor;
      case 30:
        return myAbstractBinOpExpression_BehaviorDescriptor;
      case 31:
        return myPiExpression_BehaviorDescriptor;
      case 32:
        return mySigmaExpression_BehaviorDescriptor;
      case 33:
        return myLambdaExpression_BehaviorDescriptor;
      case 34:
        return myApplicationExpression_BehaviorDescriptor;
      case 35:
        return myVariableExpression_BehaviorDescriptor;
      case 36:
        return myTupleExpression_BehaviorDescriptor;
      case 37:
        return myTelescopeArgument_BehaviorDescriptor;
      case 38:
        return myVariable_BehaviorDescriptor;
      case 39:
        return myAbstractArgument_BehaviorDescriptor;
      case 40:
        return myITypedArgument_BehaviorDescriptor;
      case 41:
        return myAbstractClause_BehaviorDescriptor;
      case 42:
        return myClause_BehaviorDescriptor;
      case 43:
        return myArrowExpression_BehaviorDescriptor;
      case 44:
        return myLeveledUniverse_BehaviorDescriptor;
      case 45:
        return myTypeUniverse_BehaviorDescriptor;
      case 46:
        return myTruncatedTypeUniverse_BehaviorDescriptor;
      case 47:
        return myPropUniverse_BehaviorDescriptor;
      case 48:
        return mySetUniverse_BehaviorDescriptor;
      case 49:
        return myDefFunction_BehaviorDescriptor;
      case 50:
        return myPrecedence_BehaviorDescriptor;
      case 51:
        return myDefType_BehaviorDescriptor;
      case 52:
        return myAbstractConstructor_BehaviorDescriptor;
      case 53:
        return myConstructor_BehaviorDescriptor;
      case 54:
        return myBinOpExpression_BehaviorDescriptor;
      case 55:
        return myNumeral__BehaviorDescriptor;
      case 56:
        return myBracketExpression_BehaviorDescriptor;
      case 57:
        return myStaticModifier_BehaviorDescriptor;
      default:
        return null;
    }
  }
}
