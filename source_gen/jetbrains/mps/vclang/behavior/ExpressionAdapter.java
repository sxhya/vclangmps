package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import com.jetbrains.jetpad.vclang.term.Abstract;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import com.jetbrains.jetpad.vclang.term.definition.Binding;
import com.jetbrains.jetpad.vclang.term.expr.Expression;
import com.jetbrains.jetpad.vclang.term.expr.visitor.NormalizeVisitor;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.vclang.intentions.TypeCheckUtils;
import com.jetbrains.jetpad.vclang.term.expr.visitor.PrettyPrintVisitor;
import java.util.ArrayList;

public abstract class ExpressionAdapter implements Abstract.Expression {
  protected SNode thisNode;

  public ExpressionAdapter(SNode t) {
    thisNode = t;
    AdapterUtils.rememberAdapter(thisNode, this);
  }
  public void setWellTyped(List<Binding> list, Expression expression) {
    AdapterUtils.setWellTyped(thisNode, expression);
    try {
      Expression type = expression;
      if (type == null) {
        return;
      }
      /*
        type = type.normalize(NormalizeVisitor.Mode.NF);
      */
      Map<String, SNode> m = MapSequence.fromMap(new HashMap<String, SNode>());
      for (SNode v : Sequence.fromIterable(Scope.getScope(thisNode, SNodeOperations.getParent(thisNode), MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x13b91a232b9ddd05L, "jetbrains.mps.vclang.structure.IVariable").getDeclarationNode()).getAvailableElements(""))) {
        if (SNodeOperations.isInstanceOf(v, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x13b91a232b9ddd05L, "jetbrains.mps.vclang.structure.IVariable"))) {
          MapSequence.fromMap(m).put(SPropertyOperations.getString(SNodeOperations.cast(v, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x13b91a232b9ddd05L, "jetbrains.mps.vclang.structure.IVariable")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), SNodeOperations.cast(v, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x13b91a232b9ddd05L, "jetbrains.mps.vclang.structure.IVariable")));
        }
      }
      BuildModelVisitor visitor = new BuildModelVisitor();
      for (Binding li : ListSequence.fromList(list).reversedList()) {
        if (li != null && li.getName() != null) {
          SNode v = MapSequence.fromMap(m).get(li.getName().getPrefixName());
          ListSequence.fromList(visitor.indices).addElement(v);
        } else {
          ListSequence.fromList(visitor.indices).addElement(null);
        }
      }
      SNode e = type.accept(visitor, new BuildModelVisitor.Context());
      thisNode.putUserObject(TypeCheckUtils.TYPE, e);
    } catch (Exception exc) {
      exc.printStackTrace();
    }

  }


  public void prettyPrint(StringBuilder builder, List<String> names, byte prec) {
    accept(new PrettyPrintVisitor(builder, names, 0), prec);
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    accept(new PrettyPrintVisitor(builder, new ArrayList<String>(), 0), ExpressionAdapter.PREC);
    return builder.toString();
  }
}
