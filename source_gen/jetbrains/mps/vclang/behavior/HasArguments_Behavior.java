package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.scopes.runtime.CompositeWithParentScope;

public class HasArguments_Behavior {
  public static void init(SNode thisNode) {
  }
  public static List<SNode> virtual_getArguments_1801596256174391532(SNode thisNode, boolean onlyExplicit) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode arg : ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xc23f5510097501bL, 0xc23f5510097501cL, "args")))) {
      {
        SNode concept_a0b0a;
        {
          SNode node_a0b0a = arg;
          concept_a0b0a = SNodeOperations.getConceptDeclaration(node_a0b0a);
        }
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_a0b0a), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6c1L, "jetbrains.mps.vclang.structure.TelescopeArgument"))) {
          {
            SNode tele = (SNode) arg;
            if (!((SPropertyOperations.getBoolean_def(tele, MetaAdapterFactory.getProperty(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6c1L, 0xc23f551009d041dL, "isImplicit"), "false"))) || !((onlyExplicit))) {
              ListSequence.fromList(result).addSequence(ListSequence.fromList(SLinkOperations.getChildren(tele, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6c1L, 0x62a6e9940367a6e2L, "varNames"))));
            }
          }
        }
        if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_a0b0a), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6e4L, "jetbrains.mps.vclang.structure.Variable"))) {
          ListSequence.fromList(result).addElement(SNodeOperations.cast(arg, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6e4L, "jetbrains.mps.vclang.structure.Variable")));
        }
      }
    }
    return result;
  }
  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(kind), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6e4L, "jetbrains.mps.vclang.structure.Variable"))) {
      List<SNode> result = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_getArguments_1801596256174391532", new Object[]{false});
      return CompositeWithParentScope.from(BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_getArguments_1801596256174391532", new Object[]{false}), thisNode, kind);
    }
    return BehaviorReflection.invokeSuper(Scope.class, thisNode, "jetbrains.mps.lang.core.structure.ScopeProvider", "virtual_getScope_3734116213129936182", new Object[]{kind, child});
  }
}
