package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class HasArguments_Behavior {
  public static void init(SNode thisNode) {
  }
  public static List<SNode> virtual_appendToScope_1644105782651590016(SNode thisNode, SNode requestSender, AbstractScopeRequestDescriptor descriptor) {
    if (descriptor instanceof ReferentVariableRequestDescriptor) {
      ReferentVariableRequestDescriptor rdesc = (ReferentVariableRequestDescriptor) descriptor;
      List<SNode> visibleArguments;
      if (ListSequence.fromList(((List<SNode>) SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xc23f5510097501bL, 0xc23f5510097501cL, "args")))).contains(requestSender)) {
        visibleArguments = (List<SNode>) SNodeOperations.getPrevSiblings(requestSender, false);
      } else {
        visibleArguments = SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xc23f5510097501bL, 0xc23f5510097501cL, "args"));
      }
      List<SNode> result = new ArrayList<SNode>();
      for (SNode arg : ListSequence.fromList(visibleArguments)) {
        {
          SNode concept_a0e0a0a;
          {
            SNode node_a0e0a0a = arg;
            concept_a0e0a0a = SNodeOperations.getConceptDeclaration(node_a0e0a0a);
          }
          if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_a0e0a0a), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6c1L, "jetbrains.mps.vclang.structure.TelescopeArgument"))) {
            for (SNode var : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(arg, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6c1L, "jetbrains.mps.vclang.structure.TelescopeArgument")), MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a6c1L, 0x62a6e9940367a6e2L, "varNames")))) {
              BehaviorReflection.invokeVirtual(Void.class, var, "virtual_addVariable_1644105782651964639", new Object[]{descriptor, result});
            }
          }
        }
      }
      if (descriptor.isChildrenFirst()) {
        result = ListSequence.fromList(result).reversedList();
      }
      return result;
    } else {
      return new ArrayList<SNode>();
    }

  }
}
