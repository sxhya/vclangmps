package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class IVcConcept_Behavior {
  public static void init(SNode thisNode) {
  }
  public static List<SNode> virtual_doProcessScopeRequest_1644105782651573969(SNode thisNode, SNode requestSender, AbstractScopeRequestDescriptor descriptor) {
    List<SNode> parentNodes = (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x16d1097f9c1d0c09L, "jetbrains.mps.vclang.structure.IVcConcept")) ? BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), ((SNode) SNodeOperations.getParent(thisNode)), "virtual_doProcessScopeRequest_1644105782651573969", new Object[]{thisNode, descriptor}) : new ArrayList<SNode>());
    List<SNode> myNodes = BehaviorReflection.invokeVirtual((Class<List<SNode>>) ((Class) Object.class), thisNode, "virtual_appendToScope_1644105782651590016", new Object[]{requestSender, descriptor});
    List<SNode> result = new ArrayList<SNode>();
    if (descriptor.isChildrenFirst()) {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(myNodes));
      ListSequence.fromList(result).addSequence(ListSequence.fromList(parentNodes));
    } else {
      ListSequence.fromList(result).addSequence(ListSequence.fromList(parentNodes));
      ListSequence.fromList(result).addSequence(ListSequence.fromList(myNodes));
    }
    return result;
  }
  public static List<SNode> virtual_appendToScope_1644105782651590016(SNode thisNode, SNode requestSender, AbstractScopeRequestDescriptor descriptor) {
    return new ArrayList<SNode>();
  }
}
