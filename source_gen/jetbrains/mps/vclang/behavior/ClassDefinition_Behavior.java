package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Iterator;
import jetbrains.mps.lang.scopes.runtime.CompositeWithParentScope;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.jetbrains.jetpad.vclang.term.Abstract;

public class ClassDefinition_Behavior {
  public static void init(SNode thisNode) {
  }
  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(kind), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec7ec8L, "jetbrains.mps.vclang.structure.Definition")) && SNodeOperations.hasRole(child, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec305aL, 0xfc408c778ec7ec9L, "statements"))) {
      List<SNode> prevDefs = new ArrayList<SNode>();
      ListSequence.fromList(prevDefs).addElement(SNodeOperations.cast(child, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d5f034L, "jetbrains.mps.vclang.structure.IClassMember")));
      ListSequence.fromList(prevDefs).addSequence(Sequence.fromIterable(SNodeOperations.ofConcept(SNodeOperations.getPrevSiblings(child, false), MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d5f034L, "jetbrains.mps.vclang.structure.IClassMember"))));
      List<SNode> result = new ArrayList<SNode>();
      Set<SNode> importedClasses = SetSequence.fromSet(new HashSet<SNode>());
      Set<SNode> externalClasses = SetSequence.fromSet(new HashSet<SNode>());
      SetSequence.fromSet(externalClasses).addSequence(ListSequence.fromList(SModelOperations.rootsIncludingImported(SNodeOperations.getModel(child), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec305aL, "jetbrains.mps.vclang.structure.ClassDefinition"))));
      for (SNode def : ListSequence.fromList(prevDefs)) {
        SNode definition = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), def, "virtual_getDefinition_2384453979674359704", new Object[]{});
        if ((definition != null)) {
          BehaviorReflection.invokeVirtual(Void.class, definition, "virtual_addArtifacts_2384453979680086099", new Object[]{result});
        }
        if (SNodeOperations.isInstanceOf(def, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe7cL, "jetbrains.mps.vclang.structure.OpenScopeCommand"))) {
          SetSequence.fromSet(importedClasses).addElement(SLinkOperations.getTarget(SNodeOperations.cast(def, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe7cL, "jetbrains.mps.vclang.structure.OpenScopeCommand")), MetaAdapterFactory.getReferenceLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe7fL, 0x37ebde1aa3d50122L, "classifier")));
        } else if (SNodeOperations.isInstanceOf(def, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe80L, "jetbrains.mps.vclang.structure.CloseScopeCommand"))) {
          SetSequence.fromSet(importedClasses).removeElement(SLinkOperations.getTarget(SNodeOperations.cast(def, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe80L, "jetbrains.mps.vclang.structure.CloseScopeCommand")), MetaAdapterFactory.getReferenceLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe7fL, 0x37ebde1aa3d50122L, "classifier")));
        }
      }
      {
        Iterator<SNode> importedClass_it = SetSequence.fromSet(importedClasses).iterator();
        SNode importedClass_var;
        while (importedClass_it.hasNext()) {
          importedClass_var = importedClass_it.next();
          ListSequence.fromList(result).addSequence(ListSequence.fromList(ClassDefinition_Behavior.call_getStaticMembersIncludingExported_2651614157877061667(importedClass_var)));
        }
      }
      ListSequence.fromList(result).addSequence(SetSequence.fromSet(externalClasses));
      return new VcNameHidingScope(CompositeWithParentScope.parentScope(thisNode, kind), ListScope.forNamedElements(result));
    }
    return BehaviorReflection.invokeSuper(Scope.class, thisNode, "jetbrains.mps.lang.core.structure.ScopeProvider", "virtual_getScope_3734116213129936182", new Object[]{kind, child});
  }
  public static List<SNode> call_getMembers_2651614157877038328(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    {
      Iterator<SNode> def_it = ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec305aL, 0xfc408c778ec7ec9L, "statements"))).iterator();
      SNode def_var;
      while (def_it.hasNext()) {
        def_var = def_it.next();
        SNode def1 = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), def_var, "virtual_getDefinition_2384453979674359704", new Object[]{});
        if ((def1 != null)) {
          BehaviorReflection.invokeVirtual(Void.class, def1, "virtual_addArtifacts_2384453979680086099", new Object[]{result});
        }
      }
    }
    return result;
  }
  public static List<SNode> call_getStaticMembersIncludingExported_2651614157877061667(SNode thisNode) {
    Set<SNode> result = SetSequence.fromSet(new HashSet<SNode>());
    for (SNode classifier : ListSequence.fromList(SLinkOperations.getChildren(thisNode, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec305aL, 0xfc408c778ec7ec9L, "statements"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe81L, "jetbrains.mps.vclang.structure.ExportScopeCommand"));
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe81L, "jetbrains.mps.vclang.structure.ExportScopeCommand")), MetaAdapterFactory.getReferenceLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x37ebde1aa3d4fe7fL, 0x37ebde1aa3d50122L, "classifier"));
      }
    })) {
      if (classifier != null) {
        SetSequence.fromSet(result).addSequence(ListSequence.fromList(ClassDefinition_Behavior.call_getStaticMembersIncludingExported_2651614157877061667(classifier)));
      }
    }
    SetSequence.fromSet(result).addSequence(ListSequence.fromList(ClassDefinition_Behavior.call_getMembers_2651614157877038328(thisNode)));
    return SetSequence.fromSet(result).toListSequence();
  }
  public static Abstract.Definition virtual_toSourceDefinition_6698694374042209625(SNode thisNode) {
    return new ClassAdapter(thisNode);
  }
  public static SNode virtual_getDefinition_2384453979674359704(SNode thisNode) {
    return thisNode;
  }
  public static void virtual_addArtifacts_2384453979680086099(SNode thisNode, List<SNode> artifacts) {
    ListSequence.fromList(artifacts).addElement(thisNode);
  }
}
