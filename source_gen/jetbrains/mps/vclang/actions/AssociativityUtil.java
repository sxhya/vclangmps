package jetbrains.mps.vclang.actions;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class AssociativityUtil {
  public static void fixAssociativity(SNode expr) {
    {
      SNode concept_a0a;
      {
        SNode node_a0a = expr;
        concept_a0a = SNodeOperations.getConceptDeclaration(node_a0a);
      }
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept_a0a), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, "jetbrains.mps.vclang.structure.AbstractBinOpExpression"))) {
        {
          SNode binOp = SNodeOperations.cast(expr, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, "jetbrains.mps.vclang.structure.AbstractBinOpExpression"));
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(binOp, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, 0x75cfba109e316b68L, "leftArg")), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, "jetbrains.mps.vclang.structure.AbstractBinOpExpression"))) {
            SNode left = SNodeOperations.cast(SLinkOperations.getTarget(binOp, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, 0x75cfba109e316b68L, "leftArg")), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, "jetbrains.mps.vclang.structure.AbstractBinOpExpression"));
            if (BehaviorReflection.invokeVirtual(Integer.TYPE, left, "virtual_getPriority_7707026478727611842", new Object[]{}) < BehaviorReflection.invokeVirtual(Integer.TYPE, binOp, "virtual_getPriority_7707026478727611842", new Object[]{})) {
              rotateRight(binOp);
              binOp = left;
            }
          }
          // TODO: Fix this 
        }
      }
    }
  }
  public static void rotateRight(SNode binOp) {
    SNode left = SNodeOperations.cast(SLinkOperations.getTarget(binOp, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, 0x75cfba109e316b68L, "leftArg")), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, "jetbrains.mps.vclang.structure.AbstractBinOpExpression"));
    SNode leftRight = SLinkOperations.getTarget(left, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, 0x75cfba109e316b6aL, "rightArg"));
    SNodeOperations.detachNode(left);
    SNodeOperations.replaceWithAnother(binOp, left);
    SNodeOperations.replaceWithAnother(leftRight, binOp);
    SLinkOperations.setTarget(binOp, MetaAdapterFactory.getContainmentLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x62a6e9940367a261L, 0x75cfba109e316b68L, "leftArg"), leftRight);
  }
}
