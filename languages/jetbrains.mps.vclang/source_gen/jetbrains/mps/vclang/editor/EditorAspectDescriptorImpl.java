package jetbrains.mps.vclang.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new AbstractBinOpExpression_Editor()));
      case 1:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new AbstractScopeCommand_Editor()));
      case 2:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ApplicationExpression_Editor()));
      case 3:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ArrowExpression_Editor()));
      case 4:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ClassDefinition_Editor()));
      case 5:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new Clause_Editor()));
      case 6:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new Constructor_Editor()));
      case 7:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ConstructorWithPatterns_Editor()));
      case 8:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new DefExpression_Editor()));
      case 9:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new DefFunction_Editor()));
      case 10:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new DefType_Editor()));
      case 11:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new DotExpression_Editor()));
      case 12:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ElimExpression_Editor()));
      case 13:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ImplicitArgument_Editor()));
      case 14:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new LambdaExpression_Editor()));
      case 15:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new LetClause_Editor()));
      case 16:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new LetExpression_Editor()));
      case 17:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new LeveledUniverse_Editor()));
      case 18:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new Literal_Editor()));
      case 19:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new NewExpression_Editor()));
      case 20:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new Numeral__Editor()));
      case 21:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new OverrideModifier_Editor()));
      case 22:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new ParenthesizedExpression_Editor()));
      case 23:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PatternAny_Editor()));
      case 24:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PatternConstructor_Editor()));
      case 25:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PatternId_Editor()));
      case 26:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PatternParenthesis_Editor()));
      case 27:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PiExpression_Editor()));
      case 28:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new Precedence_Editor()));
      case 29:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new PropUniverse_Editor()));
      case 30:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new SigmaExpression_Editor()));
      case 31:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new StaticFieldAccessOperation_Editor()));
      case 32:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new StaticModifier_Editor()));
      case 33:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new TelescopeArgument_Editor()));
      case 34:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new TruncatedTypeUniverse_Editor()));
      case 35:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new TupleExpression_Editor()));
      case 36:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new TypedArgument_Editor()));
      case 37:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new Variable_Editor()));
      case 38:
        return collectEditors(descriptor, Collections.<ConceptEditor>singletonList(new VariableExpression_Editor()));
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0c, descriptor.getConceptFqName())) {
      case 0:
        if ("jetbrains.mps.vclang.editor.AbstractCentralPart".equals(editorComponentId)) {
          return collectEditorComponents(descriptor, editorComponentId, Collections.<ConceptEditorComponent>singletonList(new AbstractCentralPart()));
        }
        break;
      case 1:
        if ("jetbrains.mps.vclang.editor.AbstractCentralPart".equals(editorComponentId)) {
          return collectEditorComponents(descriptor, editorComponentId, Collections.<ConceptEditorComponent>singletonList(new BinOpCentralPart()));
        }
        break;
      case 2:
        if ("jetbrains.mps.vclang.editor.DefFunction_main_component".equals(editorComponentId)) {
          return collectEditorComponents(descriptor, editorComponentId, Collections.<ConceptEditorComponent>singletonList(new DefFunction_main_component()));
        }
        break;
      case 3:
        if ("jetbrains.mps.vclang.editor.NameAndPrecedence".equals(editorComponentId)) {
          return collectEditorComponents(descriptor, editorComponentId, Collections.<ConceptEditorComponent>singletonList(new NameAndPrecedence()));
        }
        break;
      case 4:
        if ("jetbrains.mps.vclang.editor.ConstructorPatternComponent".equals(editorComponentId)) {
          return collectEditorComponents(descriptor, editorComponentId, Collections.<ConceptEditorComponent>singletonList(new ConstructorPatternComponent()));
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"jetbrains.mps.vclang.structure.AbstractBinOpExpression", "jetbrains.mps.vclang.structure.AbstractScopeCommand", "jetbrains.mps.vclang.structure.ApplicationExpression", "jetbrains.mps.vclang.structure.ArrowExpression", "jetbrains.mps.vclang.structure.ClassDefinition", "jetbrains.mps.vclang.structure.Clause", "jetbrains.mps.vclang.structure.Constructor", "jetbrains.mps.vclang.structure.ConstructorWithPatterns", "jetbrains.mps.vclang.structure.DefExpression", "jetbrains.mps.vclang.structure.DefFunction", "jetbrains.mps.vclang.structure.DefType", "jetbrains.mps.vclang.structure.DotExpression", "jetbrains.mps.vclang.structure.ElimExpression", "jetbrains.mps.vclang.structure.ImplicitArgument", "jetbrains.mps.vclang.structure.LambdaExpression", "jetbrains.mps.vclang.structure.LetClause", "jetbrains.mps.vclang.structure.LetExpression", "jetbrains.mps.vclang.structure.LeveledUniverse", "jetbrains.mps.vclang.structure.Literal", "jetbrains.mps.vclang.structure.NewExpression", "jetbrains.mps.vclang.structure.Numeral_", "jetbrains.mps.vclang.structure.OverrideModifier", "jetbrains.mps.vclang.structure.ParenthesizedExpression", "jetbrains.mps.vclang.structure.PatternAny", "jetbrains.mps.vclang.structure.PatternConstructor", "jetbrains.mps.vclang.structure.PatternId", "jetbrains.mps.vclang.structure.PatternParenthesis", "jetbrains.mps.vclang.structure.PiExpression", "jetbrains.mps.vclang.structure.Precedence", "jetbrains.mps.vclang.structure.PropUniverse", "jetbrains.mps.vclang.structure.SigmaExpression", "jetbrains.mps.vclang.structure.StaticFieldAccessOperation", "jetbrains.mps.vclang.structure.StaticModifier", "jetbrains.mps.vclang.structure.TelescopeArgument", "jetbrains.mps.vclang.structure.TruncatedTypeUniverse", "jetbrains.mps.vclang.structure.TupleExpression", "jetbrains.mps.vclang.structure.TypedArgument", "jetbrains.mps.vclang.structure.Variable", "jetbrains.mps.vclang.structure.VariableExpression"};
  private static String[] stringSwitchCases_xbvbvu_a0a0c = new String[]{"jetbrains.mps.vclang.structure.AbstractBinOpExpression", "jetbrains.mps.vclang.structure.BinOpExpression", "jetbrains.mps.vclang.structure.DefFunction", "jetbrains.mps.vclang.structure.Definition", "jetbrains.mps.vclang.structure.IPatternConstructor"};
}
