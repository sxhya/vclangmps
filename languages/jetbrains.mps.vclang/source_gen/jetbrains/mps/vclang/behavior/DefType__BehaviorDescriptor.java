package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import com.jetbrains.jetpad.vclang.term.Abstract;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class DefType__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x75cfba109e2e5fe5L, "jetbrains.mps.vclang.structure.DefType");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Abstract.Definition> toSourceDefinition_id5NQyKEZGoPp = new SMethodBuilder<Abstract.Definition>(new SJavaCompoundTypeImpl(Abstract.Definition.class)).name("toSourceDefinition").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5NQyKEZGoPp").registry(REGISTRY).build();
  public static final SMethod<SNode> getDefinition_id24ni4bpKruo = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getDefinition").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("24ni4bpKruo").registry(REGISTRY).build();
  public static final SMethod<Void> addArtifacts_id24ni4bq6hxj = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addArtifacts").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("24ni4bq6hxj").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<Abstract.Statement> toSourceStatement_id3wdrnIK4lOW = new SMethodBuilder<Abstract.Statement>(new SJavaCompoundTypeImpl(Abstract.Statement.class)).name("toSourceStatement").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3wdrnIK4lOW").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toSourceDefinition_id5NQyKEZGoPp, getDefinition_id24ni4bpKruo, addArtifacts_id24ni4bq6hxj, toSourceStatement_id3wdrnIK4lOW);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Abstract.Definition toSourceDefinition_id5NQyKEZGoPp(@NotNull SNode __thisNode__) {
    return new DefTypeAdapter(__thisNode__);
  }
  /*package*/ static SNode getDefinition_id24ni4bpKruo(@NotNull SNode __thisNode__) {
    return __thisNode__;
  }
  /*package*/ static void addArtifacts_id24ni4bq6hxj(@NotNull SNode __thisNode__, List<SNode> artifacts) {
    ListSequence.fromList(artifacts).addElement(__thisNode__);
    ListSequence.fromList(artifacts).addSequence(ListSequence.fromList(SNodeOperations.getNodeDescendants(__thisNode__, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x75cfba109e2ee29aL, "jetbrains.mps.vclang.structure.Constructor"), false, new SAbstractConcept[]{})));
  }
  /*package*/ static Abstract.Statement toSourceStatement_id3wdrnIK4lOW(@NotNull SNode __thisNode__) {
    return new DefineStatementAdapter(__thisNode__, false);
  }

  /*package*/ DefType__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Abstract.Definition) toSourceDefinition_id5NQyKEZGoPp(node));
      case 1:
        return (T) ((SNode) getDefinition_id24ni4bpKruo(node));
      case 2:
        addArtifacts_id24ni4bq6hxj(node, (List<SNode>) parameters[0]);
        return null;
      case 3:
        return (T) ((Abstract.Statement) toSourceStatement_id3wdrnIK4lOW(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
