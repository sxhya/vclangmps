package jetbrains.mps.vclang.behavior;

/*Generated by MPS */

import com.jetbrains.jetpad.vclang.term.Abstract;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import com.jetbrains.jetpad.vclang.module.DefinitionPair;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import com.jetbrains.jetpad.vclang.module.Namespace;
import com.jetbrains.jetpad.vclang.module.RootModule;
import com.jetbrains.jetpad.vclang.term.expr.arg.Utils;
import com.jetbrains.jetpad.vclang.term.definition.Definition;
import com.jetbrains.jetpad.vclang.term.expr.visitor.AbstractExpressionVisitor;

public class DefCallExpressionAdapter extends ExpressionAdapter implements Abstract.DefCallExpression {

  public DefCallExpressionAdapter(SNode t) {
    super(SNodeOperations.cast(t, MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xc23f55100976f5cL, "jetbrains.mps.vclang.structure.Expression")));
  }


  public DefinitionPair getDefinitionPair() {
    if (!(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(thisNode, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x5c7035a38c5ef32eL, "jetbrains.mps.vclang.structure.RefExpression")), MetaAdapterFactory.getReferenceLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x5c7035a38c5ef32eL, 0x5c7035a38c5ef32fL, "ref")), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec7ec8L, "jetbrains.mps.vclang.structure.Definition")))) {
      return null;
    }
    SNode def = SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(thisNode, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x5c7035a38c5ef32eL, "jetbrains.mps.vclang.structure.RefExpression")), MetaAdapterFactory.getReferenceLink(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x5c7035a38c5ef32eL, 0x5c7035a38c5ef32fL, "ref")), MetaAdapterFactory.getConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0xfc408c778ec7ec8L, "jetbrains.mps.vclang.structure.Definition"));
    List<String> path = AdapterUtils.getPath(def);
    Namespace n = RootModule.ROOT;
    for (String s : path) {
      n = n.getChild(new Utils.Name(s));
    }
    Abstract.Definition d = (Abstract.Definition) AdapterUtils.resolveDef(def);
    Definition wt = (Definition) AdapterUtils.getWellTyped(def);
    return new DefinitionPair(n, d, wt);
  }

  public void replaceWithDefCall(DefinitionPair pair) {
    // TODO: Do nothing 
  }

  public Abstract.Expression getExpression() {
    // TODO: Should we implement this? 
    return null;
  }
  public Utils.Name getName() {
    return RefExpression__BehaviorDescriptor.getInternalName_id5LKdqecnLnC.invoke(SNodeOperations.cast(thisNode, MetaAdapterFactory.getInterfaceConcept(0x2db233bb72db49c3L, 0xadc47ae97f87f8dcL, 0x5c7035a38c5ef32eL, "jetbrains.mps.vclang.structure.RefExpression")));
  }

  public <P, R> R accept(AbstractExpressionVisitor<? super P, ? extends R> visitor, P params) {
    return visitor.visitDefCall(this, params);
  }
}
